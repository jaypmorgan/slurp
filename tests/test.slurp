(library tidyverse)

(defparam x ;; this is a comment
  (rnorm 100 0 1))

(defun my-cool-function (num-samples mean sd)
  "my docstring"
  (rnorm num-samples :mean mean :sd sd))

(defun print-my-name (name) (print (paste "Hello," name)))

(print (my-cool-function 5 10 10))

(print (* x 2))

(print (mean (^ x 10)))

(lambda (x) (* x 5))

(print
 (map [1 2 3 4 5] (lambda (x) (* x 10))))

(defparam weird-name? TRUE)
(print weird-name?)

(+ 1 2 3 4 5)

(print-my-name "SluRp")

;; Language lasagnes

(library reticulate)

(defparam np (import "numpy"))
(defparam torch (import "torch"))
(defparam nn (import "torch.nn"))

(defparam model
  (nn$Sequential (nn$Linear :in_features 4L :out_features 10L)
                 (nn$ReLU)
                 (nn$Linear :in_features 10L :out_features 3L)
                 (nn$Softmax)))
(print model)

(defun create-data ()
  (torch$FloatTensor (np$array (as.matrix (select iris
                                             [Sepal.Width, Sepal.Length, Petal.Width, Petal.Length])))))

(defparam data (create-data))

(print input-data)

(defparam preds (model data))

(print preds)
