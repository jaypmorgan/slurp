(library tidyverse)
(library R6)
(library reticulate)

;; S6 Object
(defparam Accumulator
  (R6Class "Accumulator" {:sum 0
                          :add (lambda (:x 0)
                                 (defparam self$sum (+ x self$sum))
                                 (invisible self))}))

;; Create a new accumulator object and try to add 10 to the initial
;; value (which should be 0)
(defparam x (Accumulator$new))
(x$add 10)

(defparam x ;; this is a comment inside a function
  (rnorm 100 0 1))

(defun my-cool-function (num-samples mean sd)
  "my docstring"
  (rnorm num-samples :mean mean :sd sd))

(defun print-my-name (name) (print (paste "Hello," name)))
(print-my-name "SluRp")

(defparam weird-name? TRUE)
(print weird-name?)

(if (TRUE)
    (progn
      (print "Test")
      (print "test2"))
  (print "got here"))

(if (FALSE)
    (progn
      (print "Test")
      (print "test2"))
  (print "got here"))

(defun print-my-name2 (name)
  (print name))

(print (my-cool-function 5 10 10))

(defparam x 2)
(print (* x 2))

(print (mean (^ x 10)))

(lambda (x) (* x 5))

(print
 (map [1 2 3 4 5] (lambda (x) (* x 10))))

(+ 1 2 3 4 5)

(defparam x (make-array {:x 50 :y 2 :z 1} (rnorm 100)))
(defparam y (make-array {:x 50 :y 2} (rnorm 100)))
(defparam z (make-array [50 2 1] (rnorm 100)))

(getin x {:x [1 2]})
(getin x {:y [2 1]})
(getin x [1 2])
(getin x 1)
(getin x (seq 1 10))

(setin x 1 5)
(setin x {:x [5 10]} 5)
(setin y {:y 2} 2)
