;; Using slurp to do some Deep Learning
;;
;; This example is perhaps a lot more verbose than what you would
;; normally see as I want to use this opportunity to demonstrate how
;; to do things in slurp, even if there are quicker and better ways to
;; do them generally. For example, instead of using torchvision and
;; torchdatasets to handle the downloading and pre-processing of the
;; MNIST dataset, we shall do this ourselves. The functions to
;; accomplish this task are long, but it shows the syntactical
;; structure of slurp.
;;
;; If you wish to run this example for yourself, you will need to
;; ensure you have installed the tidyverse set of pacakges, as well as
;; torch:
;; (install.packages ["tidyverse" "torch"])

;; ---------------------------------------------------------------------
;; Load the libraries and set out the learning parameters

(library torch)
(library tidyverse)

;; defparam can accept many variable/value assignments in one call
;; here we are setting our the parameters of the learning process.
(defparam batch-size 64
  epochs 100
  learning-rate 0.005
  device (if (cuda-is-available)
             (torch-device "cuda")
           "cpu"))

;; Create a transformation function from the image to something the
;; neural network can use.
(defun transforms (img :devi device)
  (%>% ;; use magrittr as threading marco like feature :-)
   (transform-to-tensor)
   (.$to dev)))

;; ----------------------------------------------------------------------
;; Download and prepare the datasets for the model

(defun type->filename (subset :label? FALSE)
  "Transform a subset name to the filename representation"
  (defun end-fn (label?)
    (if (== label? TRUE)
        "labels-idx1-ubyte"
      "images-idx3-ubyte"))
  ;; need returns here as R is not returning the last call but the
  ;; last statement. If we don't then == type "train will return NULL
  ;; as its not the last statement in the function

  ;; I will need to change this to case or make cond to include implicit
  ;; return statements. I think the latter is better perhaps in a nested
  ;; function call?.
  (cond ((== subset "train") (return (paste0 "train" "-" (end-fn label?))))
        ((== subset "test") (return (paste0 "t10k" "-" (end-fn label?))))))

(defun prepare-data ()
  "Uncompress the datasets"
  (defparam files (Sys.glob "*.gz"))
  (map files (lambda (file) (system (paste "gunzip" file)))))

(defun download-data (subset)
  "download the mnist images and labels for subset = train or test"
  (defparam base-name "http://yann.lecun.com/exdb/mnist/"
            request "curl -O ")
  (system (paste0 request base-name (type->filename subset :label? FALSE)))
  (system (paste0 request base-name (type->filename subset :label? TRUE))))

(defun download-all-data ()
  "Get and uncompress all data"
  (download-data "train")
  (download-data "test")
  (prepare-data))

(defun read-mnist-images (subset)
  "Load an mnist data from IDX format"
  (defparam f (file (type->filename subset) "rb")
    ;; read the first 4 values in file that correspond to:
    ;; magicnumber, number of digits, dims of x, dims of y
    file-params (readBin f (integer) :n 4 :endian "big")
    n-samples (nth file-params 2)
    n-rows (nth file-params 3)
    n-cols (nth file-params 4))
  ;; read the data n-samples times to get each digits from the dataset
  ;; and finally concatenate into a 3-dimensional array
  (%>%
    (sapply (seq 1 n-samples)
            (lambda (i) (as.integer (readBin f :what "raw" :n (* n-rows n-cols) :endian "big"))))
    (array . [n-samples n-rows n-cols])))

;; Create a dataset object
(defparam mnist-dataset
  (dataset :name "mnist_dataset"
            :initialize (lambda (subset)
                          ;;(unless (file.exists (type->filename subset :label TRUE))
                          ;;  (download-all-data))
                          (defparam self$data (read-mnist-images subset)))))

(defun get-data (subset trans :bs batch-size :shuffle FALSE)
  "Get the /subset/ of the cats vs dogs dataset"
  (dataloader (mnist-dataset subset)
              :batch_size bs
              :shuffle shuffle))

;; Load each subset of the data and store them in a single list. Can
;; be accessed via `data$train` etc
(defparam data
  {:train (get-data "train" transforms :shuffle TRUE)}
  {:test  (get-data "test"  transforms)})
